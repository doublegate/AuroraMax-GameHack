name: Build and Push Image
on:
  schedule:
    - cron: '0 7 * * *'  # 7 AM UTC everyday
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:
  
env:
    IMAGE_NAME: auroramax-gamehack
    IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  push-ghcr:
    name: Build and push image
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image_flavor: [main]
        base_name: [aurora]
        major_version: [41]
        include:
          - major_version: 41
            is_latest_version: true
            is_stable_version: true
    steps:
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4
        
      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@v7
        
      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          TIMESTAMP="$(date +%Y%m%d)"
          VARIANT="${{ matrix.image_flavor }}"

          COMMIT_TAGS=()
          BUILD_TAGS=()

          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("${SHA_SHORT}-${VARIANT}")

          COMMIT_TAGS+=("pr-${{ github.event.number }}-${VARIANT}")

          if [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
             [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
              COMMIT_TAGS+=("${VARIANT}")
          fi

          BUILD_TAGS=("${VARIANT}-${TIMESTAMP}")

          if [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
             [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
              BUILD_TAGS+=("${VARIANT}-latest")
          fi

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done
              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT
          
      - name: Get current version
        id: labels
        run: |
          ver=$(skopeo inspect docker://ghcr.io/ublue-os/${{ matrix.base_name }}-${{ matrix.image_flavor }}:${{ matrix.major_version }} | jq -r '.Labels["org.opencontainers.image.version"]')
          echo "VERSION=$ver" >> $GITHUB_OUTPUT

      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          build-args: |
            IMAGE_NAME=${{ env.IMAGE_NAME }}
            IMAGE_VENDOR=${{ github.repository_owner }}
            IMAGE_FLAVOR=${{ matrix.image_flavor }}
            IMAGE_BRANCH=${{ github.ref_name }}
            BASE_IMAGE_NAME=${{ matrix.base_name }}
            FEDORA_MAJOR_VERSION=${{ matrix.major_version }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.version=${{ steps.labels.outputs.VERSION }}
            org.opencontainers.image.description=AuroraMax GameHack - Gaming-focused Universal Blue custom image
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/main/README.md
            io.artifacthub.package.logo-url=https://avatars.githubusercontent.com/u/${{ github.repository_owner }}
            
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Image to GHCR
      - name: Setup Cosign
        run: |
          echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
          chmod 600 cosign.key

      - name: Sign the image with Cosign
        run: |
          cosign sign --key cosign.key ghcr.io/${{ github.repository_owner }}/auroramax-gamehack:latest
        run: |
          echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
          chmod 600 cosign.key

      - name: Sign the image with Cosign
        run: |
          cosign sign --key cosign.key ghcr.io/${{ github.repository_owner }}/auroramax-gamehack:latest
        uses: redhat-actions/push-to-registry@v2
        id: push
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ steps.registry_case.outputs.lowercase }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Sign container image
        uses: sigstore/cosign-installer@v3.7.0
        
      - name: Sign container image with sigstore
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_image.outputs.image }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}