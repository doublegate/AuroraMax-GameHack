name: BlueBuild AuroraMax-GameHack

# TEMPORARY NOTICE: Image signing is currently disabled due to BlueBuild
# issues with empty stage-keys. See to-dos/init-minimal-post-build-fixes.md
# for details and tracking of the fix.

on:
  # Build on push to main branch or version tags
  push:
    branches:
      - main
      - fix/init-minimal-build-workarounds
    tags:
      - 'v*.*.*'
    paths:
      - 'variants/**'
      - 'common-files/**'
      - 'templates/**'
      - '.github/workflows/bluebuild.yml'
  
  # Build on pull requests
  pull_request:
    branches:
      - main
    paths:
      - 'variants/**'
      - 'common-files/**'
      - 'templates/**'
      - '.github/workflows/bluebuild.yml'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      variant:
        description: 'Variant to build (leave empty for all)'
        required: false
        default: ''
        type: string
  
  # Scheduled builds (daily at 3 AM UTC to catch base image updates)
  schedule:
    - cron: '0 3 * * *'

env:
  # Use GitHub Container Registry
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  # Matrix strategy to build multiple variants
  bluebuild:
    name: Build AuroraMax Variants
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        # Define all variants to build
        variant:
          - init-minimal
          # Future variants will be added here:
          # - init-stable
          # - init-cuttingedge
          # - init-ux
          # - init-dev
          # - init-gaming
          # - init-hacking
          # - semifinal
          # - release-candidate
        
        # Exclude combinations if needed
        exclude: []
    
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better caching

      # Generate metadata for the image
      - name: Generate Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ env.IMAGE_REGISTRY }}/auroramax-gamehack-${{ matrix.variant }}
          labels: |
            org.opencontainers.image.title=AuroraMax GameHack ${{ matrix.variant }}
            org.opencontainers.image.description=AuroraMax GameHack Linux - ${{ matrix.variant }} variant
            org.opencontainers.image.vendor=AuroraMax Project
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
            io.artifacthub.package.logo-url=https://raw.githubusercontent.com/${{ github.repository }}/main/images/auroramax-logo.png
          tags: |
            # Latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Branch name
            type=ref,event=branch
            # PR number
            type=ref,event=pr
            # Git tag
            type=ref,event=tag
            # Git short SHA
            type=sha,prefix={{branch}}-
            # Timestamp
            type=raw,value={{date 'YYYYMMDD'}},enable={{is_default_branch}}
            # Semantic versions
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      # Build the image using BlueBuild
      - name: Build Image with BlueBuild
        uses: blue-build/github-action@v1
        with:
          # Path to recipe file relative to variant directory
          recipe: variants/${{ matrix.variant }}/recipe.yml
          # Cosign private key for signing
          # TEMPORARILY DISABLED: BlueBuild has issues with empty stage-keys
          # cosign_private_key: ${{ secrets.SIGNING_SECRET }}
          # Registry token (GitHub token for GHCR)
          registry_token: ${{ github.token }}
          # Registry username
          registry_username: ${{ github.actor }}
          # PR event number for PR builds
          pr_event_number: ${{ github.event.pull_request.number }}
          # Use build space maximization for large images
          maximize_build_space: true
          # Use the latest stable CLI
          use_unstable_cli: false
          # Registry configuration
          registry: ghcr.io
          registry_namespace: ${{ github.repository_owner }}
          # Enable rechunking for better updates (experimental but useful)
          rechunk: false
          # Use layer caching for faster builds
          use_cache: true
          # Don't squash layers (allows caching)
          squash: false
          
      # Generate a build report
      - name: Generate Build Summary
        if: always()
        run: |
          echo "## Build Summary for ${{ matrix.variant }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Variant**: ${{ matrix.variant }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.IMAGE_REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: auroramax-gamehack-${{ matrix.variant }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Git SHA**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Git Ref**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "variants/${{ matrix.variant }}/README.md" ]; then
            echo "### Variant Description" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat "variants/${{ matrix.variant }}/README.md" | head -20 >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### Installation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Rebase to this image:" >> $GITHUB_STEP_SUMMARY
          echo "# NOTE: Image is currently unsigned due to BlueBuild key mounting issues" >> $GITHUB_STEP_SUMMARY
          echo "rpm-ostree rebase ostree-unverified-registry:ghcr.io/${{ github.repository_owner }}/auroramax-gamehack-${{ matrix.variant }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Check if all builds succeeded
  check:
    name: Check All Builds
    if: always()
    needs: [bluebuild]
    runs-on: ubuntu-latest
    steps:
      - name: Check build results
        run: |
          if [ "${{ needs.bluebuild.result }}" != "success" ]; then
            echo "One or more variant builds failed!"
            exit 1
          fi
          echo "All variant builds completed successfully!"

# Security: Ensure the workflow has appropriate permissions
# The GITHUB_TOKEN permissions are restricted to the minimum required