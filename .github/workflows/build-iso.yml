# .github/workflows/build-iso.yml
# AuroraMax GameHack ISO Build Workflow

name: Build Installer ISO

on:
  # Build on push to branches or tags
  push:
    branches:
      - main
      - fix/init-minimal-build-workarounds
    tags:
      - 'v*.*.*'
    paths:
      - 'variants/**'
      - 'common-files/**'
      - 'templates/**'
      - '.github/workflows/build-iso.yml'

  # Build on pull requests
  pull_request:
    branches:
      - main
      - fix/init-minimal-build-workarounds
    paths:
      - 'variants/**'
      - 'common-files/**'
      - 'templates/**'
      - '.github/workflows/build-iso.yml'

  # Allow manual trigger
  workflow_dispatch:
    inputs:
      variant:
        description: 'Variant to build ISO for'
        required: true
        default: 'init-minimal'
        type: choice
        options:
          - init-minimal
          - init-stable
          - init-cuttingedge
          - init-ux
          - init-dev
          - init-gaming
          - init-hacking
          - semifinal
          - release-candidate
      image_tag:
        description: 'Image tag to use (leave empty for latest)'
        required: false
        default: ''
        type: string

env:
  REGISTRY: ghcr.io
  REGISTRY_USER: ${{ github.repository_owner }}
  IMAGE_NAME: auroramax-gamehack

jobs:
  build-iso:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y buildah grub-pc-bin xorriso cpio squashfs-tools linux-image-generic

    - name: Log in to GitHub Container Registry
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | buildah login --username ${{ github.actor }} --password-stdin ghcr.io

    - name: Pull and mount container image
      run: |
        IMAGE=ghcr.io/doublegate/auroramax-gamehack-init-minimal:latest
        CONTAINER=$(buildah from $IMAGE)
        MOUNTPOINT=$(buildah mount $CONTAINER)
        mkdir rootfs
        cp -a $MOUNTPOINT/. rootfs/
        buildah unmount $CONTAINER

    - name: Add kernel and init script
      run: |
        KERNEL=$(ls /boot/vmlinuz-* | tail -n1)
        cp $KERNEL bzImage

        cat << 'EOF' > rootfs/init
        #!/bin/sh
        mount -t proc none /proc
        mount -t sysfs none /sys
        exec /bin/sh
        EOF
        chmod +x rootfs/init

    - name: Create initramfs
      run: |
        cd rootfs
        find . -print0 | cpio --null -ov --format=newc | gzip -9 > ../initramfs.cpio.gz
        cd ..

    - name: Prepare GRUB configuration
      run: |
        mkdir -p iso/boot/grub
        cp bzImage iso/boot/
        cp initramfs.cpio.gz iso/boot/
        cat << 'EOF' > iso/boot/grub/grub.cfg
        set default=0
        set timeout=5

        menuentry "AuroraMax GameHack" {
            linux /boot/bzImage
            initrd /boot/initramfs.cpio.gz
        }
        EOF

    - name: Create bootable ISO
      run: |
        grub-mkrescue -o auroramax.iso iso/

    - name: Upload ISO artifact
      uses: actions/upload-artifact@v4
      with:
        name: auroramax-iso
        path: auroramax.iso
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qemu-utils \
            xorriso \
            isolinux \
            syslinux-efi \
            grub-pc-bin \
            grub-efi-amd64-bin \
            mtools \
            dosfstools

      - name: Set up Buildah
        run: |
          sudo apt-get install -y buildah
          buildah --version

      - name: Determine variant and image reference
        id: image-ref
        run: |
          # Determine variant (use workflow_dispatch input or default to init-minimal)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VARIANT="${{ github.event.inputs.variant }}"
          else
            VARIANT="init-minimal"
          fi
          echo "variant=${VARIANT}" >> $GITHUB_OUTPUT

          # Determine image reference
          if [ -n "${{ github.event.inputs.image_tag }}" ]; then
            echo "ref=${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}-${VARIANT}:${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "ref=${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}-${VARIANT}:latest" >> $GITHUB_OUTPUT
          fi

      - name: Pull OCI image
        run: |
          buildah pull ${{ steps.image-ref.outputs.ref }}
          buildah images

      - name: Create ISO configuration
        run: |
          cat > iso-config.toml << EOF
          [image]
          transport = "registry"
          name = "${{ steps.image-ref.outputs.ref }}"

          [installer]
          vendor = "AuroraMax Project"
          product = "AuroraMax GameHack"
          variant = "${{ steps.image-ref.outputs.variant }}"

          [boot]
          title = "AuroraMax GameHack - ${{ steps.image-ref.outputs.variant }}"
          timeout = 30

          [output]
          filename = "auroramax-gamehack-${{ steps.image-ref.outputs.variant }}.iso"
          EOF

      - name: Build ISO using bootc-image-builder
        run: |
          # This is a placeholder for the actual bootc-image-builder command
          # In reality, you would use the appropriate tool here
          echo "Building ISO with bootc-image-builder..."
          echo "Config: $(cat iso-config.toml)"

          # For now, create a dummy ISO file
          mkdir -p output
          echo "Placeholder ISO" > output/auroramax-gamehack-${{ steps.image-ref.outputs.variant }}.iso

      - name: Calculate checksums
        run: |
          cd output
          sha256sum *.iso > SHA256SUMS
          sha512sum *.iso > SHA512SUMS

      - name: Upload ISO artifact
        uses: actions/upload-artifact@v4
        with:
          name: auroramax-gamehack-${{ steps.image-ref.outputs.variant }}-iso
          path: |
            output/*.iso
            output/SHA256SUMS
            output/SHA512SUMS
          retention-days: 30

      - name: Create release notes
        run: |
          cat > output/release-notes.md << EOF
          # AuroraMax GameHack ISO - ${{ steps.image-ref.outputs.variant }}

          Built from: ${{ steps.image-ref.outputs.ref }}
          Build date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')

          ## Installation

          1. Download the ISO file
          2. Write it to a USB drive using dd, Rufus, or Fedora Media Writer
          3. Boot from the USB drive
          4. Follow the installation wizard

          ## Verification

          Verify the ISO integrity using the provided checksums:

          \`\`\`bash
          sha256sum -c SHA256SUMS
          sha512sum -c SHA512SUMS
          \`\`\`
          EOF

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: output/release-notes.md
